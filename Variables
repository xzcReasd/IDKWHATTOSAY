-- VARIABLES TABLE TEMPLATE FOR LUAU EXECUTOR SCRIPTS
-- Универсальная таблица для хранения сервисов, алиасов, функций, глобальных переменных и шаблонов

local variables = {
    -- Roblox Services
    services = {
        Players = game:GetService("Players"),
        UserInputService = game:GetService("UserInputService"),
        RunService = game:GetService("RunService"),
        HttpService = game:GetService("HttpService"),
        Workspace = game:GetService("Workspace"),
        CoreGui = game:GetService("CoreGui"),
        ContextActionService = game:GetService("ContextActionService"),
        TeleportService = game:GetService("TeleportService"),
        Lighting = game:GetService("Lighting"),
        Stats = game:GetService("Stats"),
        TweenService = game:GetService("TweenService"),
        Debris = game:GetService("Debris"),
        TextChatService = game:GetService("TextChatService"),
        ReplicatedStorage = game:GetService("ReplicatedStorage"),
        GuiService = game:GetService("GuiService"),
        SoundService = game:GetService("SoundService"),
        BadgeService = game:GetService("BadgeService"),
        MarketplaceService = game:GetService("MarketplaceService"),
        Teams = game:GetService("Teams"),
        StarterGui = game:GetService("StarterGui"),
        StarterPack = game:GetService("StarterPack"),
        StarterPlayer = game:GetService("StarterPlayer"),
        ReplicatedFirst = game:GetService("ReplicatedFirst"),
        PolicyService = game:GetService("PolicyService"),
        VRService = game:GetService("VRService"),
        AnalyticsService = game:GetService("AnalyticsService"),
        DataStoreService = game:GetService("DataStoreService"),
        PathfindingService = game:GetService("PathfindingService"),
        ProximityPromptService = game:GetService("ProximityPromptService"),
        CollectionService = game:GetService("CollectionService"),
        LogService = game:GetService("LogService"),
        MemoryStoreService = game:GetService("MemoryStoreService"),
        MessagingService = game:GetService("MessagingService"),
        AssetService = game:GetService("AssetService"),
        InsertService = game:GetService("InsertService"),
        -- ...
    },

    -- Aliases for common objects
    aliases = {
        Camera = workspace.CurrentCamera,
        LocalPlayer = game:GetService("Players").LocalPlayer,
        Mouse = game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer:GetMouse(),
        PlaceId = game.PlaceId,
        JobId = game.JobId,
        GameId = game.GameId,
        CreatorId = game.CreatorId,
        CreatorType = game.CreatorType,
        MainEvent = game:GetService("ReplicatedStorage"):FindFirstChild("MainEvent"),
        GuiOffset = (pcall(function() return game:GetService("GuiService"):GetGuiInset().Y end) and game:GetService("GuiService"):GetGuiInset().Y) or 0,
        Version = game.Version,
        EngineVersion = settings().Diagnostics and settings().Diagnostics.Version or "unknown",
        IsStudio = game:GetService("RunService"):IsStudio(),
        IsTenFootInterface = game:GetService("GuiService").IsTenFootInterface,
        IsVR = pcall(function() return game:GetService("VRService").VRDeviceAvailable end) and game:GetService("VRService").VRDeviceAvailable or false,
        Platform = UserSettings and UserSettings().GameSettings and UserSettings().GameSettings.Platform or "unknown",
        DeviceType = UserSettings and UserSettings().GameSettings and UserSettings().GameSettings.ComputerName or "unknown",
        -- ...
    },

    -- Server/Client Info
    info = {
        ServerTime = os.time(),
        LocalTime = os.date("%c"),
        Uptime = tick(),
        Ping = (game:GetService("Stats").Network and game:GetService("Stats").Network.ServerStatsItem["Data Ping"] and game:GetService("Stats").Network.ServerStatsItem["Data Ping"].Value) or 0,
        FPS = (pcall(function() return game:GetService("Stats").Workspace["Frame Rate"] end) and game:GetService("Stats").Workspace["Frame Rate"].Value) or 60,
        PlayerCount = #game:GetService("Players"):GetPlayers(),
        MaxPlayers = game:GetService("Players").MaxPlayers or 0,
        PrivateServerId = game.PrivateServerId,
        PrivateServerOwnerId = game.PrivateServerOwnerId,
        LocaleId = game.LocaleId,
        JobId = game.JobId,
        CreatorId = game.CreatorId,
        CreatorType = game.CreatorType,
        -- ...
    },

    -- Session/Environment
    session = {
        ScriptStart = tick(),
        Executor = identifyexecutor and identifyexecutor() or "unknown",
        Exploit = (syn and "Synapse") or (KRNL_LOADED and "KRNL") or (is_sirhurt_closure and "SirHurt") or (secure_load and "Sentinel") or "Unknown",
        HWID = (gethwid and gethwid()) or (syn and syn.request and syn.request({Url="http://httpbin.org/get"}).Headers["Syn-Fingerprint"]) or "unknown",
        Is64Bit = jit and jit.arch == "x64" or false,
        IsWindows = (string.find(string.lower(os.getenv("OS") or ""), "windows") ~= nil),
        IsMac = (string.find(string.lower(os.getenv("HOME") or ""), "/users/") ~= nil),
        IsMobile = (UserInputService and UserInputService.TouchEnabled) or false,
        -- ...
    },

    -- Player info (current user)
    player = {
        Name = game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.Name or "",
        UserId = game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.UserId or 0,
        AccountAge = game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.AccountAge or 0,
        Team = game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.Team or nil,
        Health = (game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health) or 0,
        MaxHealth = (game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").MaxHealth) or 0,
        Backpack = game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer:FindFirstChildOfClass("Backpack") or nil,
        Character = game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.Character or nil,
        Humanoid = (game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")) or nil,
        -- ...
    },

    -- Server players info (other players)
    players = function()
        local t = {}
        for _,plr in ipairs(game:GetService("Players"):GetPlayers()) do
            t[#t+1] = {
                Name = plr.Name,
                UserId = plr.UserId,
                AccountAge = plr.AccountAge,
                Team = plr.Team,
                IsLocal = plr == game:GetService("Players").LocalPlayer,
                -- ...
            }
        end
        return t
    end,

    -- Math functions
    math = {
        clamp = math.clamp,
        floor = math.floor,
        cos = math.cos,
        abs = math.abs,
        atan2 = math.atan2,
        rad = math.rad,
        sin = math.sin,
        max = math.max,
        min = math.min,
        pi = math.pi,
        acos = math.acos,
        sqrt = math.sqrt,
        random = math.random,
        deg = math.deg,
        noise = math.noise,
        pow = math.pow,
    },

    -- Vector/UDim/CFrame constructors
    constructors = {
        Vector2 = Vector2.new,
        Vector3 = Vector3.new,
        UDim2 = UDim2.new,
        UDim = UDim.new,
        Rect = Rect.new,
        CFrame = CFrame.new,
        CFrameAngles = CFrame.Angles,
    },

    -- Color constructors
    colors = {
        Color3 = Color3.new,
        fromRGB = Color3.fromRGB,
        fromHSV = Color3.fromHSV,
        fromHex = Color3.fromHex,
        ColorSequence = ColorSequence.new,
        ColorSequenceKeypoint = ColorSequenceKeypoint.new,
        NumberSequence = NumberSequence.new,
        NumberSequenceKeypoint = NumberSequenceKeypoint.new,
    },

    -- Table functions
    table = {
        remove = table.remove,
        insert = table.insert,
        find = table.find,
        sort = table.sort,
        clear = table.clear,
        concat = table.concat,
        unpack = table.unpack,
    },

    -- Coroutine/task
    coroutine = {
        wrap = coroutine.wrap,
        create = coroutine.create,
        resume = coroutine.resume,
        yield = coroutine.yield,
    },
    task = {
        wait = task.wait,
        spawn = task.spawn,
        delay = task.delay,
    },

    -- Drawing/Instance
    drawing = {
        new = Drawing.new,
    },
    instance = {
        new = Instance.new,
    },

    -- Utility
    utility = {
        getgenv = getgenv,
        getrawmetatable = getrawmetatable,
        gethiddenproperty = gethiddenproperty,
        sethiddenproperty = sethiddenproperty,
        setreadonly = setreadonly,
        isfile = isfile,
        isfolder = isfolder,
        makefolder = makefolder,
        writefile = writefile,
        readfile = readfile,
        delfile = delfile,
        listfiles = listfiles,
        getcustomasset = getcustomasset,
        fireclickdetector = fireclickdetector,
        setclipboard = setclipboard,
        loadstring = loadstring,
        assert = assert,
        pcall = pcall,
        xpcall = xpcall,
        warn = warn,
        tick = tick,
        osclock = os.clock,
        stringformat = string.format,
        -- universal executor API (дополнительно)
        base64decode = base64decode,
        base64encode = base64encode,
        isexecutorclosure = isexecutorclosure,
        isluau = isluau,
        isreadonly = isreadonly,
        islclosure = islclosure,
        isourclosure = isourclosure,
        is_synapse_function = is_synapse_function,
        checkcaller = checkcaller,
        getcallingscript = getcallingscript,
        getrenv = getrenv,
        getgc = getgc,
        getreg = getreg,
        getupvalues = getupvalues,
        setupvalue = setupvalue,
        getconstants = getconstants,
        setconstant = setconstant,
        getinfo = debug and debug.getinfo or getinfo,
        setthreadidentity = setthreadidentity,
        getthreadidentity = getthreadidentity,
        getnamecallmethod = getnamecallmethod,
        setnamecallmethod = setnamecallmethod,
        hookfunction = hookfunction,
        hookmetamethod = hookmetamethod,
        newcclosure = newcclosure,
        clonefunction = clonefunction,
        -- ...
    },
    -- Universal executor API (универсальные функции для большинства executors)
    universal_api = {
        base64decode = base64decode,
        base64encode = base64encode,
        hookfunction = hookfunction,
        hookmetamethod = hookmetamethod,
        newcclosure = newcclosure,
        getnamecallmethod = getnamecallmethod,
        setnamecallmethod = setnamecallmethod,
        getcallingscript = getcallingscript,
        getrenv = getrenv,
        getgc = getgc,
        getreg = getreg,
        getupvalues = getupvalues,
        setupvalue = setupvalue,
        getconstants = getconstants,
        setconstant = setconstant,
        isexecutorclosure = isexecutorclosure,
        isluau = isluau,
        islclosure = islclosure,
        isourclosure = isourclosure,
        isreadonly = isreadonly,
        checkcaller = checkcaller,
        setthreadidentity = setthreadidentity,
        getthreadidentity = getthreadidentity,
        clonefunction = clonefunction,
        -- ...
    },
    -- Debug/Memory/String/Math/OS/Table/HTTP/Instance/Event/Metatable/Global/Task/Proto utils
    debug_utils = {
        getupvalue = debug and debug.getupvalue or getupvalue,
        setupvalue = debug and debug.setupvalue or setupvalue,
        getinfo = debug and debug.getinfo or getinfo,
        traceback = debug and debug.traceback or traceback,
        getlocal = debug and debug.getlocal or getlocal,
        setlocal = debug and debug.setlocal or setlocal,
        getproto = getproto,
        setproto = setproto,
        getprotos = getprotos,
        getstack = getstack,
        getconstants = getconstants,
        setconstant = setconstant,
        getmetatable = getmetatable,
        setmetatable = setmetatable,
        getregistry = debug and debug.getregistry or getregistry,
        getfenv = getfenv,
        setfenv = setfenv,
        -- ...
    },
    memory_utils = {
        collectgarbage = collectgarbage,
        gcinfo = gcinfo,
        -- ...
    },
    string_utils = {
        split = string.split,
        gmatch = string.gmatch,
        match = string.match,
        gsub = string.gsub,
        find = string.find,
        reverse = string.reverse,
        rep = string.rep,
        byte = string.byte,
        char = string.char,
        len = string.len,
        lower = string.lower,
        upper = string.upper,
        sub = string.sub,
        format = string.format,
        -- ...
    },
    math_utils = {
        log = math.log,
        exp = math.exp,
        ceil = math.ceil,
        randomseed = math.randomseed,
        fmod = math.fmod,
        frexp = math.frexp,
        ldexp = math.ldexp,
        modf = math.modf,
        tan = math.tan,
        sinh = math.sinh,
        cosh = math.cosh,
        tanh = math.tanh,
        asin = math.asin,
        atan = math.atan,
        log10 = math.log10,
        -- ...
    },
    os_utils = {
        time = os.time,
        date = os.date,
        difftime = os.difftime,
        clock = os.clock,
        exit = os.exit,
        getenv = os.getenv,
        setlocale = os.setlocale,
        remove = os.remove,
        rename = os.rename,
        tmpname = os.tmpname,
        -- ...
    },
    table_utils = {
        pack = table.pack,
        move = table.move,
        foreach = table.foreach,
        foreachi = table.foreachi,
        -- ...
    },
    http_utils = {
        request = request,
        http_request = http_request,
        syn_request = syn and syn.request or nil,
        httpget = httpget,
        httpgetasync = httpgetasync,
        httppost = httppost,
        httppostasync = httppostasync,
        WebSocket = WebSocket,
        -- ...
    },
    instance_utils = {
        getinstances = getinstances,
        getnilinstances = getnilinstances,
        getloadedmodules = getloadedmodules,
        getconnections = getconnections,
        firetouchinterest = firetouchinterest,
        fireproximityprompt = fireproximityprompt,
        -- ...
    },
    event_utils = {
        hookevent = hookevent,
        fireevent = fireevent,
        disconnect = disconnect,
        connect = connect,
        -- ...
    },
    metatable_utils = {
        setmetatable = setmetatable,
        getmetatable = getmetatable,
        rawget = rawget,
        rawset = rawset,
        rawlen = rawlen,
        rawequal = rawequal,
        -- ...
    },
    global_utils = {
        setglobal = setglobal,
        getglobal = getglobal,
        setfenv = setfenv,
        getfenv = getfenv,
        -- ...
    },
    task_utils = {
        spawn = spawn,
        delay = delay,
        wait = wait,
        defer = task and task.defer or nil,
        synchronize = task and task.synchronize or nil,
        desynchronize = task and task.desynchronize or nil,
        -- ...
    },
    proto_utils = {
        getproto = getproto,
        setproto = setproto,
        getprotos = getprotos,
        -- ...
    },

    -- State/flags (шаблон для хранения состояния)
    state = {
        Alive = false,
        RootPart = nil,
        Humanoid = nil,
        Character = nil,
        CurrentTarget = nil,
        CurrentTool = nil,
        CurrentConfig = nil,
        -- ...
    },

    -- Custom user data (шаблон)
    user = {
        Name = "",
        UserId = 0,
        AccountAge = 0,
        Team = nil,
        Status = "None",
        -- ...
    },

    -- Miscellaneous
    misc = {
        delta = nil,
        radians = 0,
        typing_check = false,
        connections = {},
        drawings = {},
        instances = {},
        -- ...
    },

    -- Friends info
    friends = function()
        local t = {}
        local success, friendPages = pcall(function()
            return game:GetService("Players").LocalPlayer:GetFriendsAsync()
        end)
        if success and friendPages then
            while true do
                for _,item in ipairs(friendPages:GetCurrentPage()) do
                    t[#t+1] = item
                end
                if friendPages.IsFinished then break end
                friendPages:AdvanceToNextPageAsync()
            end
        end
        return t
    end,

    -- Groups info
    groups = function()
        local t = {}
        local plr = game:GetService("Players").LocalPlayer
        if plr and plr.GetGroups then
            local success, groups = pcall(function() return plr:GetGroups() end)
            if success and groups then
                for _,g in ipairs(groups) do
                    t[#t+1] = g
                end
            end
        end
        return t
    end,

    -- Badges info
    badges = function()
        local t = {}
        local plr = game:GetService("Players").LocalPlayer
        local badgeService = game:GetService("BadgeService")
        if plr and badgeService then
            local success, badges = pcall(function() return badgeService:GetBadgeIdsAsync(plr.UserId) end)
            if success and badges then
                for _,b in ipairs(badges) do
                    t[#t+1] = b
                end
            end
        end
        return t
    end,

    -- Graphics settings
    graphics = {
        QualityLevel = settings().Rendering.QualityLevel,
        EditQualityLevel = settings().Rendering.EditQualityLevel,
        MeshPartDetailLevel = settings().Rendering.MeshPartDetailLevel,
        FrameRateManager = settings().Rendering.FrameRateManager,
        VSync = settings().Rendering.EnableVSync,
        -- ...
    },

    -- FPS/Performance
    performance = {
        FPSCap = settings().Rendering and settings().Rendering.FramerateCap or 60,
        GPU = settings().Diagnostics and settings().Diagnostics.GPU or "unknown",
        CPU = settings().Diagnostics and settings().Diagnostics.CPU or "unknown",
        Memory = collectgarbage("count"),
        -- ...
    },

    -- Place info
    place = {
        Name = game.Name,
        PlaceId = game.PlaceId,
        JobId = game.JobId,
        CreatorId = game.CreatorId,
        CreatorType = game.CreatorType,
        LocaleId = game.LocaleId,
        PrivateServerId = game.PrivateServerId,
        PrivateServerOwnerId = game.PrivateServerOwnerId,
        -- ...
    },

    -- Parent/Ancestor info
    parent = function(obj)
        local t = {}
        while obj and obj.Parent do
            t[#t+1] = obj.Parent
            obj = obj.Parent
        end
        return t
    end,

    -- Script info
    scriptinfo = {
        Name = (script and script.Name) or "unknown",
        ClassName = (script and script.ClassName) or "unknown",
        Parent = (script and script.Parent) or nil,
        FullName = (script and script:GetFullName()) or "unknown",
        -- ...
    },

    -- Environment info
    environment = {
        Env = getgenv and getgenv() or _G,
        Version = _VERSION,
        Jit = jit and jit.version or "none",
        Is64Bit = jit and jit.arch == "x64" or false,
        -- ...
    },

    -- Executor/Exploit info
    exploit = {
        Name = (identifyexecutor and identifyexecutor()) or (syn and "Synapse") or (KRNL_LOADED and "KRNL") or (is_sirhurt_closure and "SirHurt") or (secure_load and "Sentinel") or "Unknown",
        IsSynapse = syn ~= nil,
        IsKRNL = KRNL_LOADED ~= nil,
        IsScriptWare = identifyexecutor and string.find(identifyexecutor(), "ScriptWare") ~= nil or false,
        -- ...
    },

    -- Custom data/logs/profiling
    custom = {
        Logs = {},
        Profile = {},
        Settings = {},
        Temp = {},
        -- ...
    },
}

return variables 
